{% extends 'default.html.twig' %}

{% block title %}Exprass Ecommerce | Checkout
{% endblock %}

{% block stylesheets %}
	<link rel="stylesheet" href="/assets/css/stripe.css">
	<script src="https://js.stripe.com/v3/"></script>
{% endblock %}

{% block body %}
	<p>Order ID:
		{{ orderId }}</p>
	{% include "page_head/page_head.html.twig" with {'page_name': 'Checkout'} %}
	<div class="main_content" data-cart="{{cart_json}}" data-public_key="{{public_key}}" data-orderid="{{orderId}}">
		<div class="section">
			<div class="container">
				<div class="row">
					<div class="col-lg-6"></div>
				</div>
				<div class="row"></div>
				<div class="row">
					<div class="col-md-6">
						<div class="heading_s1">
							<h4>Billing Address</h4>
							<select name="billing_address" class="form-control">
								<option value="">--- Choose billing address ---</option>
								{% for address in addresses %}
									<option value="{{ address.id }}">
										{{ address.name }}
										({{ address.street }}
										{{ address.codepostal }}
										{{ address.city }}
										{{ address.state }})
									</option>
								{% endfor %}
							</select>
						</div>
						<div class="heading_s1">
							<h4>Shipping Address</h4>
							<select name="shipping_address" class="form-control">
								<option value="">--- Choose shipping address ---</option>
								{% for address in addresses %}
									<option value="{{ address.id }}">
										{{ address.name }}
										({{ address.street }}
										{{ address.codepostal }}
										{{ address.city }}
										{{ address.state }})
									</option>
								{% endfor %}
							</select>
						</div>
						<div class="heading_s1">
							<h4>Comments</h4>
							<textarea class="form-control" name="Comments" id="" cols="30" rows="10"></textarea>
						</div>
					</div>
					<div class="col-md-6">
						<div class="order_review">
							<div class="heading_s1">
								<h4>Your Orders</h4>
							</div>
							<div class="table-responsive order_table">
								<table class="table">
									<thead>
										<tr>
											<th>Product</th>
											<th>Total</th>
										</tr>
									</thead>
									<tbody>
										{% for item in cart.items %}
											<tr>
												<td>
													<img src="/assets/images/products/{{item.product.imageUrls[0]}}" width="30" height="30" alt="">
													{{ item.product.name }}
													<span class="product-qty">x
														{{ item.quantity}}</span>
												</td>
												<td>{{ ((item.product.soldePrice / 100) * item.quantity) | format_currency('EUR') }}</td>
											</tr>
										{% endfor %}
									</tbody>
									<tfoot>
										<tr>
											<th>SubTotal</th>
											<td class="product-subtotal">{{ (cart.data.subTotalHT / 100) | format_currency('EUR') }}</td>
										</tr>
										<tr>
											<th>Shipping</th>
											<td>{{ (cart.data.carrier_price / 100) | format_currency('EUR') }}</td>
										</tr>
										<tr>
											<th>Total</th>
											<td class="product-subtotal">{{ ((cart.data.subTotalTTC + cart.data.carrier_price) / 100) | format_currency('EUR') }}</td>
										</tr>
									</tfoot>
								</table>
							</div>
							<div class="payment_method d-none">
								<a href="#" class="btn btn-fill-out btn-block" data-bs-toggle="modal" data-bs-target="#exampleModal">
									Pay now ({{ ((cart.data.subTotalTTC + cart.data.carrier_price) / 100) | format_currency('EUR') }})
								</a>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<!-- Modal -->
	<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div
					class="modal-header">
					{# <h5 class="modal-title">Modal title</h5> #}
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<form id="payment-form">
						<div
							id="payment-element"><!--Stripe.js injects the Payment Element-->
						</div>
						<button id="submit">
							<div class="spinner hidden" id="spinner"></div>
							<span id="button-text">Pay now</span>
						</button>
						<div id="payment-message" class="hidden"></div>
					</form>
				</div>
			</div>
		</div>
	</div>
{% endblock %}

{% block javascripts %}
	<script>
		document.addEventListener("DOMContentLoaded", () => {
let shipping_address = "";
let billing_address = "";
let displayPayBtn = false;
let comment = "";

const billing_address_select = document.querySelector('select[name="billing_address"]');
const shipping_address_select = document.querySelector('select[name="shipping_address"]');
const comments_textarea = document.querySelector('textarea');
const payBtn = document.querySelector('.payment_method'); // ‚ö†Ô∏è V√©rifier si payBtn est bien trouv√©

console.log("payBtn:", payBtn); // üîç Debugging

const updateButton = () => {
displayPayBtn = !! billing_address && !! shipping_address;
console.log("Afficher bouton:", displayPayBtn);

if (payBtn) {
if (displayPayBtn) {
payBtn.classList.remove("d-none");
console.log("‚úÖ Bouton affich√© !");
} else {
payBtn.classList.add("d-none");
console.log("‚ùå Bouton cach√© !");
}
} else {
console.error("‚ö†Ô∏è ERREUR : payBtn est introuvable !");
}
};

if (billing_address_select) {
billing_address_select.addEventListener("change", (event) => {
billing_address = event.target.value;
console.log("Nouvelle adresse de facturation:", billing_address);
updateButton();
});
} else {
console.error("‚ùå ERREUR : √âl√©ment 'billing_address_select' introuvable !");
}

if (shipping_address_select) {
shipping_address_select.addEventListener("change", (event) => {
shipping_address = event.target.value;
console.log("Nouvelle adresse de livraison:", shipping_address);
updateButton();
});
} else {
console.error("‚ùå ERREUR : √âl√©ment 'shipping_address_select' introuvable !");
}

if (comments_textarea) {
comments_textarea.addEventListener("change", (event) => {
comment = event.target.value;
updateButton();
});
}
});

// Stripe component

const main_content = document.querySelector(".main_content");
const cart = JSON.parse(main_content ?. dataset ?. cart || "[]");
const public_key = main_content ?. dataset ?. public_key || "";
const orderId = main_content ?. dataset ?. orderid || ""; // Assure-toi que c'est bien "orderid" et pas "orderId" ici

console.log("Order ID:", orderId);
// V√©rifie qu'il est bien d√©fini


// This is your test publishable API key.
const stripe = Stripe(public_key);

// The items the customer wants to buy
const items = cart.items;

let elements;

initialize();

document.querySelector("#payment-form").addEventListener("submit", handleSubmit);

let emailAddress = '';
// Fetches a payment intent and captures the client secret
async function initialize() {

console.log("Order ID:", orderId); // <-- Debug

const {clientSecret} = await fetch (`/api/stripe/payment-intent/${orderId}`, {
method: "POST",
headers: {
"Content-Type": "application/json"
},
body: JSON.stringify({})
}).then((r) => r.json());


elements = stripe.elements({clientSecret});

const paymentElementOptions = {
layout: "accordion"
};

const paymentElement = elements.create("payment", paymentElementOptions);
paymentElement.mount("#payment-element");
}

async function handleSubmit(e) {
e.preventDefault();
setLoading(true);

const {error} = await stripe.confirmPayment({
elements,
confirmParams: { // Make sure to change this to your payment completion page
return_url: "http://localhost:4242/complete.html"
}
});

// This point will only be reached if there is an immediate error when
// confirming the payment. Otherwise, your customer will be redirected to
// your `return_url`. For some payment methods like iDEAL, your customer will
// be redirected to an intermediate site first to authorize the payment, then
// redirected to the `return_url`.
if (error.type === "card_error" || error.type === "validation_error") {
showMessage(error.message);
} else {
showMessage("An unexpected error occurred.");
} setLoading(false);
}

// ------- UI helpers -------

function showMessage(messageText) {
const messageContainer = document.querySelector("#payment-message");

messageContainer.classList.remove("hidden");
messageContainer.textContent = messageText;

setTimeout(function () {
messageContainer.classList.add("hidden");
messageContainer.textContent = "";
}, 4000);
}

// Show a spinner on payment submission
function setLoading(isLoading) {
if (isLoading) { // Disable the button and show a spinner
document.querySelector("#submit").disabled = true;
document.querySelector("#spinner").classList.remove("hidden");
document.querySelector("#button-text").classList.add("hidden");
} else {
document.querySelector("#submit").disabled = false;
document.querySelector("#spinner").classList.add("hidden");
document.querySelector("#button-text").classList.remove("hidden");
}
}
	</script>
{% endblock %}
